{
 "metadata": {
  "name": "Random Forest Variable Importance"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "import pylab as pl\n",
      "import random"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 107
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.ensemble import RandomForestClassifier\n",
      "from sklearn.metrics import f1_score"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 108
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#read in the data and combine it\n",
      "#data from: http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/\n",
      "red = pd.read_csv(\"data/winequality-red.csv\", sep=\";\")\n",
      "red['color'] = \"red\"\n",
      "white = pd.read_csv(\"data/winequality-white.csv\", sep=\";\")\n",
      "white['color'] = \"white\"\n",
      "df = red.append(white)\n",
      "df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>fixed acidity</th>\n",
        "      <th>volatile acidity</th>\n",
        "      <th>citric acid</th>\n",
        "      <th>residual sugar</th>\n",
        "      <th>chlorides</th>\n",
        "      <th>free sulfur dioxide</th>\n",
        "      <th>total sulfur dioxide</th>\n",
        "      <th>density</th>\n",
        "      <th>pH</th>\n",
        "      <th>sulphates</th>\n",
        "      <th>alcohol</th>\n",
        "      <th>quality</th>\n",
        "      <th>color</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>  7.4</td>\n",
        "      <td> 0.70</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 1.9</td>\n",
        "      <td> 0.076</td>\n",
        "      <td> 11</td>\n",
        "      <td> 34</td>\n",
        "      <td> 0.9978</td>\n",
        "      <td> 3.51</td>\n",
        "      <td> 0.56</td>\n",
        "      <td> 9.4</td>\n",
        "      <td> 5</td>\n",
        "      <td> red</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>  7.8</td>\n",
        "      <td> 0.88</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 2.6</td>\n",
        "      <td> 0.098</td>\n",
        "      <td> 25</td>\n",
        "      <td> 67</td>\n",
        "      <td> 0.9968</td>\n",
        "      <td> 3.20</td>\n",
        "      <td> 0.68</td>\n",
        "      <td> 9.8</td>\n",
        "      <td> 5</td>\n",
        "      <td> red</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>  7.8</td>\n",
        "      <td> 0.76</td>\n",
        "      <td> 0.04</td>\n",
        "      <td> 2.3</td>\n",
        "      <td> 0.092</td>\n",
        "      <td> 15</td>\n",
        "      <td> 54</td>\n",
        "      <td> 0.9970</td>\n",
        "      <td> 3.26</td>\n",
        "      <td> 0.65</td>\n",
        "      <td> 9.8</td>\n",
        "      <td> 5</td>\n",
        "      <td> red</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 11.2</td>\n",
        "      <td> 0.28</td>\n",
        "      <td> 0.56</td>\n",
        "      <td> 1.9</td>\n",
        "      <td> 0.075</td>\n",
        "      <td> 17</td>\n",
        "      <td> 60</td>\n",
        "      <td> 0.9980</td>\n",
        "      <td> 3.16</td>\n",
        "      <td> 0.58</td>\n",
        "      <td> 9.8</td>\n",
        "      <td> 6</td>\n",
        "      <td> red</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>  7.4</td>\n",
        "      <td> 0.70</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 1.9</td>\n",
        "      <td> 0.076</td>\n",
        "      <td> 11</td>\n",
        "      <td> 34</td>\n",
        "      <td> 0.9978</td>\n",
        "      <td> 3.51</td>\n",
        "      <td> 0.56</td>\n",
        "      <td> 9.4</td>\n",
        "      <td> 5</td>\n",
        "      <td> red</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 109,
       "text": [
        "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
        "0            7.4              0.70         0.00             1.9      0.076   \n",
        "1            7.8              0.88         0.00             2.6      0.098   \n",
        "2            7.8              0.76         0.04             2.3      0.092   \n",
        "3           11.2              0.28         0.56             1.9      0.075   \n",
        "4            7.4              0.70         0.00             1.9      0.076   \n",
        "\n",
        "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  alcohol  \\\n",
        "0                   11                    34   0.9978  3.51       0.56      9.4   \n",
        "1                   25                    67   0.9968  3.20       0.68      9.8   \n",
        "2                   15                    54   0.9970  3.26       0.65      9.8   \n",
        "3                   17                    60   0.9980  3.16       0.58      9.8   \n",
        "4                   11                    34   0.9978  3.51       0.56      9.4   \n",
        "\n",
        "   quality color  \n",
        "0        5   red  \n",
        "1        5   red  \n",
        "2        5   red  \n",
        "3        6   red  \n",
        "4        5   red  "
       ]
      }
     ],
     "prompt_number": 109
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>fixed acidity</th>\n",
        "      <th>volatile acidity</th>\n",
        "      <th>citric acid</th>\n",
        "      <th>residual sugar</th>\n",
        "      <th>chlorides</th>\n",
        "      <th>free sulfur dioxide</th>\n",
        "      <th>total sulfur dioxide</th>\n",
        "      <th>density</th>\n",
        "      <th>pH</th>\n",
        "      <th>sulphates</th>\n",
        "      <th>alcohol</th>\n",
        "      <th>quality</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "      <td> 6497.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>    7.215307</td>\n",
        "      <td>    0.339666</td>\n",
        "      <td>    0.318633</td>\n",
        "      <td>    5.443235</td>\n",
        "      <td>    0.056034</td>\n",
        "      <td>   30.525319</td>\n",
        "      <td>  115.744574</td>\n",
        "      <td>    0.994697</td>\n",
        "      <td>    3.218501</td>\n",
        "      <td>    0.531268</td>\n",
        "      <td>   10.491801</td>\n",
        "      <td>    5.818378</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>    1.296434</td>\n",
        "      <td>    0.164636</td>\n",
        "      <td>    0.145318</td>\n",
        "      <td>    4.757804</td>\n",
        "      <td>    0.035034</td>\n",
        "      <td>   17.749400</td>\n",
        "      <td>   56.521855</td>\n",
        "      <td>    0.002999</td>\n",
        "      <td>    0.160787</td>\n",
        "      <td>    0.148806</td>\n",
        "      <td>    1.192712</td>\n",
        "      <td>    0.873255</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>    3.800000</td>\n",
        "      <td>    0.080000</td>\n",
        "      <td>    0.000000</td>\n",
        "      <td>    0.600000</td>\n",
        "      <td>    0.009000</td>\n",
        "      <td>    1.000000</td>\n",
        "      <td>    6.000000</td>\n",
        "      <td>    0.987110</td>\n",
        "      <td>    2.720000</td>\n",
        "      <td>    0.220000</td>\n",
        "      <td>    8.000000</td>\n",
        "      <td>    3.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>    6.400000</td>\n",
        "      <td>    0.230000</td>\n",
        "      <td>    0.250000</td>\n",
        "      <td>    1.800000</td>\n",
        "      <td>    0.038000</td>\n",
        "      <td>   17.000000</td>\n",
        "      <td>   77.000000</td>\n",
        "      <td>    0.992340</td>\n",
        "      <td>    3.110000</td>\n",
        "      <td>    0.430000</td>\n",
        "      <td>    9.500000</td>\n",
        "      <td>    5.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>    7.000000</td>\n",
        "      <td>    0.290000</td>\n",
        "      <td>    0.310000</td>\n",
        "      <td>    3.000000</td>\n",
        "      <td>    0.047000</td>\n",
        "      <td>   29.000000</td>\n",
        "      <td>  118.000000</td>\n",
        "      <td>    0.994890</td>\n",
        "      <td>    3.210000</td>\n",
        "      <td>    0.510000</td>\n",
        "      <td>   10.300000</td>\n",
        "      <td>    6.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>    7.700000</td>\n",
        "      <td>    0.400000</td>\n",
        "      <td>    0.390000</td>\n",
        "      <td>    8.100000</td>\n",
        "      <td>    0.065000</td>\n",
        "      <td>   41.000000</td>\n",
        "      <td>  156.000000</td>\n",
        "      <td>    0.996990</td>\n",
        "      <td>    3.320000</td>\n",
        "      <td>    0.600000</td>\n",
        "      <td>   11.300000</td>\n",
        "      <td>    6.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>   15.900000</td>\n",
        "      <td>    1.580000</td>\n",
        "      <td>    1.660000</td>\n",
        "      <td>   65.800000</td>\n",
        "      <td>    0.611000</td>\n",
        "      <td>  289.000000</td>\n",
        "      <td>  440.000000</td>\n",
        "      <td>    1.038980</td>\n",
        "      <td>    4.010000</td>\n",
        "      <td>    2.000000</td>\n",
        "      <td>   14.900000</td>\n",
        "      <td>    9.000000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 110,
       "text": [
        "       fixed acidity  volatile acidity  citric acid  residual sugar    chlorides  \\\n",
        "count    6497.000000       6497.000000  6497.000000     6497.000000  6497.000000   \n",
        "mean        7.215307          0.339666     0.318633        5.443235     0.056034   \n",
        "std         1.296434          0.164636     0.145318        4.757804     0.035034   \n",
        "min         3.800000          0.080000     0.000000        0.600000     0.009000   \n",
        "25%         6.400000          0.230000     0.250000        1.800000     0.038000   \n",
        "50%         7.000000          0.290000     0.310000        3.000000     0.047000   \n",
        "75%         7.700000          0.400000     0.390000        8.100000     0.065000   \n",
        "max        15.900000          1.580000     1.660000       65.800000     0.611000   \n",
        "\n",
        "       free sulfur dioxide  total sulfur dioxide      density           pH  \\\n",
        "count          6497.000000           6497.000000  6497.000000  6497.000000   \n",
        "mean             30.525319            115.744574     0.994697     3.218501   \n",
        "std              17.749400             56.521855     0.002999     0.160787   \n",
        "min               1.000000              6.000000     0.987110     2.720000   \n",
        "25%              17.000000             77.000000     0.992340     3.110000   \n",
        "50%              29.000000            118.000000     0.994890     3.210000   \n",
        "75%              41.000000            156.000000     0.996990     3.320000   \n",
        "max             289.000000            440.000000     1.038980     4.010000   \n",
        "\n",
        "         sulphates      alcohol      quality  \n",
        "count  6497.000000  6497.000000  6497.000000  \n",
        "mean      0.531268    10.491801     5.818378  \n",
        "std       0.148806     1.192712     0.873255  \n",
        "min       0.220000     8.000000     3.000000  \n",
        "25%       0.430000     9.500000     5.000000  \n",
        "50%       0.510000    10.300000     6.000000  \n",
        "75%       0.600000    11.300000     6.000000  \n",
        "max       2.000000    14.900000     9.000000  "
       ]
      }
     ],
     "prompt_number": 110
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clf = RandomForestClassifier(compute_importances=True)\n",
      "df['is_red'] = np.where(df['color']=='red', 1.0, 0.0)\n",
      "features = df.columns[0:12]\n",
      "clf.fit(df[features], df['is_red'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 111,
       "text": [
        "RandomForestClassifier(bootstrap=True, compute_importances=True,\n",
        "            criterion='gini', max_depth=None, max_features='auto',\n",
        "            min_density=0.1, min_samples_leaf=1, min_samples_split=2,\n",
        "            n_estimators=10, n_jobs=1, oob_score=False, random_state=None,\n",
        "            verbose=0)"
       ]
      }
     ],
     "prompt_number": 111
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "importances = pd.DataFrame({\n",
      "    \"feature\": features,\n",
      "    \"importance\": clf.feature_importances_\n",
      "})\n",
      "importances = importances.sort([\"importance\"], ascending=[0])\n",
      "importances"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>feature</th>\n",
        "      <th>importance</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td>            chlorides</td>\n",
        "      <td> 0.434997</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td> total sulfur dioxide</td>\n",
        "      <td> 0.225794</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td>              density</td>\n",
        "      <td> 0.077465</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td>     volatile acidity</td>\n",
        "      <td> 0.071125</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td>       residual sugar</td>\n",
        "      <td> 0.068697</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td>            sulphates</td>\n",
        "      <td> 0.048883</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td>                   pH</td>\n",
        "      <td> 0.019856</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td>  free sulfur dioxide</td>\n",
        "      <td> 0.018856</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td>          citric acid</td>\n",
        "      <td> 0.013202</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td>        fixed acidity</td>\n",
        "      <td> 0.012037</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td>              alcohol</td>\n",
        "      <td> 0.006845</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td>              quality</td>\n",
        "      <td> 0.002242</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 112,
       "text": [
        "                 feature  importance\n",
        "4              chlorides    0.434997\n",
        "6   total sulfur dioxide    0.225794\n",
        "7                density    0.077465\n",
        "1       volatile acidity    0.071125\n",
        "3         residual sugar    0.068697\n",
        "9              sulphates    0.048883\n",
        "8                     pH    0.019856\n",
        "5    free sulfur dioxide    0.018856\n",
        "2            citric acid    0.013202\n",
        "0          fixed acidity    0.012037\n",
        "10               alcohol    0.006845\n",
        "11               quality    0.002242"
       ]
      }
     ],
     "prompt_number": 112
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "importances = importances.sort([\"importance\"], ascending=[1])\n",
      "names = importances['feature'].tolist()\n",
      "pl.barh(np.arange(len(importances)), importances['importance'])\n",
      "pl.yticks(0.5 + np.arange(len(importances)), names)\n",
      "pl.title(\"Feature Importance\")\n",
      "pl.xlabel(\"Relative Importance\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 115,
       "text": [
        "<matplotlib.text.Text at 0x10cb811d0>"
       ]
      },
      {
       "output_type": "display_data",
       "png": "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\nAxu5VsAZW5bOAAAAAElFTkSuQmCC\n"
      }
     ],
     "prompt_number": 115
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "idx = np.random.uniform(0, 1, len(df))\n",
      "train, test =  df[idx <= 0.75], df[idx > 0.75]\n",
      "\n",
      "f1_scores = []\n",
      "for i in range(1, len(names)):\n",
      "    best_n_features = names[-i:]\n",
      "    clf = RandomForestClassifier()\n",
      "    clf.fit(train[best_n_features], train['is_red'])\n",
      "    f1 = f1_score(test['is_red'], clf.predict(test[best_n_features]))\n",
      "    f1_scores.append(f1)\n",
      "\n",
      "pl.plot(0.5 + np.arange(len(f1_scores)), f1_scores)\n",
      "pl.xticks(0.5 + np.arange(len(f1_scores)), 1 + np.arange(len(f1_scores)))\n",
      "pl.title(\"Feature Count vs. F1 Score\")\n",
      "pl.xlabel(\"# of Features\")\n",
      "pl.ylabel(\"F1 Score\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 117,
       "text": [
        "<matplotlib.text.Text at 0x107e50a10>"
       ]
      },
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAEUCAYAAADJB1rpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XtclGX+//EXCGoKeEBFZEAQjLMwilpmK5qG6xabp8JD\n5iltN1ttrdTavmHbT7PDFkW7S66HLCNsO2BlZGSYxQKVgCaIhxgcsEyNo2jAcP3+mJwcOaozHD/P\nx2MezD33dd/XNaD3+77v676v20YppRBCCNGp2bZ2A4QQQrQ+CQMhhBASBkIIISQMhBBCIGEghBAC\nCQMhhBBIGIh6eHp60qNHDxwdHXF0dMTJyYkff/zxmte5Z88eC7WweY4cOcLMmTPp378/vXv3JiQk\nhBdeeIHa2lqr1jt//nwef/xxq9ZRn8b+bkuWLMHPz48uXbrw2muvNbqewsJCpk+fbvq9BQcHN7mM\naP8kDEQdNjY2fPjhh5SXl1NeXk5ZWRkDBw685nVeyy0tBoPhisofP36c0aNHM3jwYL777jtKSkp4\n++23+fbbbykvL7/qdrRljf3dQkND+ec//8nw4cOxsbFpdD133303gwcP5sSJE/z888+8/vrruLi4\nWLStV/r3FC1ACXEZT09P9dlnn9X5vKSkRC1cuFC5uroqNzc39be//U0ZDAallFLHjh1T48ePV87O\nzqpfv35qzpw5qqSkRCml1Ny5c5Wtra267rrrlIODg3r22WfV559/rjQajdn6Bw8ebKr3iSeeUNOn\nT1dz585VTk5OatOmTY3Wf7k5c+ao2267rdHvmZiYqAICAlTv3r1VeHi4ys3NNc2zsbFRx48fN03f\nc8896m9/+5tSSqnPP/9cubm5qeeff14NGDBAubq6qi1btiillIqLi1P29vaqa9euysHBQUVGRtap\n97777lMPPfSQ2WeRkZHqhRdeUEop9fTTTys3Nzfl6OiofH196/1b1Kehv9ulxo4dq1577bVGyzg4\nOKjs7OwG5+/bt0/deOONqnfv3srd3V1t3bpVKWX893H33Xer/v37q8GDB6unnnpK1dbWKqWU2rJl\nixozZox68MEHlbOzs3r88cfVL7/8olauXKk8PDyUi4uLuu+++9T58+eb9V2F5cmRgaiXqmcvfv78\n+XTt2pXjx4+TmZnJ7t27+c9//mOa/9hjj/HDDz+Qm5uLXq8nOjoagNdffx0PDw/TXutDDz1Ub52X\n77Hu3LmTmTNnUlpayuzZs5us/1KfffYZM2bMaPD7HTlyhNmzZ/PSSy9x5swZpkyZwu23305NTU2D\nbbu0fadOnaKsrIyTJ0+yadMm7r//fkpLS1myZAlz5sxh1apVlJeXk5iYWGdds2fPJiEhwTRdXFzM\np59+SlRUFHl5ebzyyit88803lJWVsXv3bjw9PRv8Hper7+92pW644Qb+/Oc/k5CQwIkTJ8zmFRQU\nMGXKFJYvX86ZM2fIysoiNDQUgAceeIDy8nLy8/PZu3cv27ZtY8uWLaZlMzIy8Pb25qeffuLRRx9l\n1apVHDt2jOzsbI4dO0ZRURFPPvnkNbdfXKXWTiPR9gwePFg5ODio3r17q969e6upU6eqH3/8UXXr\n1s1sz+3NN99U48ePr3cd7733ntJqtabpy/da6zsyuLTME088ocaNG2ead6X129vbq08++aTB7/jk\nk0+qu+66yzRdW1ur3Nzc1N69e5VSdY8M5s+fb3ZkcN1115kdlQwYMEClp6fXKVuf2tpa5eHhob74\n4gullFKvvvqquuWWW5RSSh09elQNGDBAJScnq6qqqgbXUZ/6/m6Xa86RQXFxsVq9erUKDAxUXbp0\nUaGhoerrr79WSim1bt06NW3atDrL1NTUqK5du5odXcXFxanw8HCllPHIwMPDw+x30LNnT7PfcWpq\nqvLy8rqi7ywsx661w0i0PTY2NiQmJjJhwgTTZxkZGVRXV+Pq6mr6rLa2Fg8PD8C4p7x8+XK+/PJL\nysvLqa2tpW/fvtfUDo1GY3pfUFDQaP2Xc3Z25uTJkw2u+4cffjBb1sbGBnd3d4qKiprVNmdnZ2xt\nfzuw7tGjBxUVFc1a1sbGhqioKOLj47n55pt58803mTdvHgA+Pj68+OKLREdHc+jQISIiIvjHP/5h\n9r0bW+/lf7er0bt3b9avX8/69es5e/YsDz30EHfccQeFhYXo9XqGDBlSZ5kzZ85QXV3N4MGDTZ95\neHiY/T7d3d1N70+fPk1lZSUjRowwfaaUsnrnvmiYnCYSzeLu7k63bt04e/YsxcXFFBcXU1paysGD\nBwF49NFH6dKlC9999x2lpaW8/vrrZv+xLz8F1LNnTyorK03TBoOB06dPm5W5dJmm6r/cxIkTeeed\ndxr8PoMGDaKgoMA0rZRCr9fj5uYGGDful7bvhx9+aLLjtb52N2TWrFn897//paCggIyMDKZPn242\nb9++fRQUFGBjY8OqVauaVa81ODs7s3LlSk6ePMnPP/+Mh4cHx48fr1OuX79+2Nvbo9PpTJ+dOHHC\nLNAv/b3069eP6667jpycHNPfs6SkhLKyMqt+H9EwCQPRLK6urtx666389a9/Ne35Hz9+nC+++AKA\niooKevbsiZOTE0VFRTz77LNmy7u4uJhtRK6//nouXLjArl27qK6u5qmnnuKXX3656vovt3btWlJT\nU3nkkUc4deoUAMeOHePuu++mrKyMO++8k48++og9e/ZQXV3N888/T/fu3RkzZgxgvPpm+/btGAwG\nkpKSGqynPi4uLnz//feNlgkNDaVfv34sXryYyZMn4+TkBBj7Mvbs2cMvv/xCt27d6N69O126dGl2\n3Q2prq7mwoUL1NbWUlVVxYULFxrsX1i1ahWHDh2ipqaG8vJy/vWvfzF06FD69u3L7NmzSU5O5u23\n36ampoazZ8+SnZ1Nly5duPPOO3nssceoqKigoKCAF154gblz59Zbh62tLffeey8rVqww7QQUFRWx\ne/fua/6u4upIGIhm27ZtG1VVVQQEBNC3b19mzpxpuo79iSeeYP/+/fTq1Yvbb7+d6dOnm+0Jrlmz\nhqeeeoo+ffrwj3/8g169evHPf/6TxYsXo9FocHBwMDuNcHmHbVP1X27IkCH873//Q6fTERgYSO/e\nvZkxYwYjR47EwcGB66+/njfeeIMHHniA/v3789FHH/HBBx9gZ2c8cxoTE8MHH3xAnz59ePPNN5k6\ndarZ+hvb+1+0aBE5OTn06dOHadOmNVhu9uzZ7Nmzh9mzZ5s+++WXX1izZg39+/fH1dWVM2fOsH79\negC2b99OUFBQg+trzKRJk+jRowdpaWksWbKEHj16sG/fvnrLnj9/nqlTp9KnTx+8vb3R6/Xs3LkT\nMJ762bVrF88//zzOzs5otVoOHDgAwMsvv0zPnj0ZMmQIN998M3PmzGHBggVA/X/PDRs24OPjww03\n3ECvXr2YNGkSR44cuarvJ66djWpo90AIIUSnYfEjg4ULF+Li4kJwcHCDZf7yl78wdOhQQkJCyMzM\nNH2elJSEn58fQ4cOZcOGDZZumhBCiAZYPAwWLFhAUlJSg/N37drFsWPHOHr0KK+++ip/+tOfAGMH\n4rJly0hKSiInJ4f4+Hhyc3Mt3TwhhBD1sHgY3HzzzfTp06fB+Tt37uSee+4BYPTo0ZSUlPDjjz+S\nkZGBj48Pnp6e2NvbExUVVe8NO0IIISyvxe8zKCoqMuso1Gg0FBUVcfLkyTqfp6en11m+uZf3CSGE\nMNdYF3GrXE10rX3WSqkrfj3xxBNXtdzVvqQ+qU/q6/jfrTXqu9pXU1r8yMDNzQ29Xm+aLiwsRKPR\nUF1dbfa5Xq83u2FFCCGE9bT4kUFkZCTbtm0DIC0tjd69e+Pi4kJYWBhHjx5Fp9NRVVVFQkICkZGR\nLd08IYTolCx+ZDBr1iz27t3LmTNncHd3Z+3atVRXVwOwdOlSpkyZwq5du/Dx8aFnz56mUQ3t7OyI\njY0lIiICg8HAokWL8Pf3t1i7wsPDLbYuqU/qk/raZl2doT5raXc3nV3rQ1KEEKIzamrbKcNRCCGE\nkDAQQgghYSCEEAIJAyGEEEgYCCGEQMJACCEEEgZCCCGQMBBCCIGEgRBCCCQMhBBCIGEghBACCQMh\nhBBIGAghhEDCQAghBK3wpDMhRMdWWwsFBZCTY3wdOgT5+dCtGzg4gKPjlf/s0QOs+fhzgwEqKoyv\n8nLj6+L75vz08YFXX7Ve+1qCPM9AiHqcOGH8T+7oCE5Oxo1Sly6t3aq2xWAAne63Df7Fjf/hw9Cn\nDwQEQGCg8ae3N1RXX/lG9uLPCxeMgdDcAOneHc6da34dv/wCPXteXVA5OICLCwQFtfZfpHFNbTut\nEgZJSUmsWLECg8HA4sWLWbVqldn84uJiFi5cyPfff0/37t3ZvHkzgYGBAKxfv5433ngDW1tbgoOD\n2bJlC926dWv2FxLiap0/D++8A5s2wXffQf/+UFb220aje3djMFwMiEt/1vdZY2XaU7AYDPD993U3\n+nl50K+f+UY/IAD8/aFXL8u34dy5KwuPK9m4W/vIoy1o8TAwGAz4+vqSnJyMm5sbI0eOJD4+3uwR\nlg8//DBOTk48/vjj5OXlcf/995OcnIxOp2PChAnk5ubSrVs37rrrLqZMmcI999zT7C8kxJVQCvbv\nNwZAQgKMGgWLFkFkJHTt+lu52lqorPwtHMrLf3t/+c+mPisvNwbL5YFx8dWrl/nP+j67+NPOgid6\na2rg+PG6G/0jR4x7vvVt9B0dLVe/sK6mtp0W7zPIyMjAx8cHT09PAKKiokhMTDQLg9zcXFavXg2A\nr68vOp2O06dP4+TkhL29PZWVlXTp0oXKykrc3Nzq1BEdHW16Hx4e3mGeQSpaTnExbN8O//kPlJTA\nwoWQmQkeHvWXt7U17kE6OFx73UrVHywXX6Wlxp8//2w8DXNx+uLPS99369Z0YNT32XXX1d3bP3oU\nBg36baM/eTL89a/GjX7Pntf+vUXLSklJISUlpdnlLR4GRUVFuLu7m6Y1Gg3p6elmZUJCQnj33XcZ\nO3YsGRkZFBQUUFhYiFarZeXKlXh4eHDdddcRERHBxIkT69RxaRgI0Vy1tfD558ajgF274Pe/h+ee\ngwkTjBv7lmJjY9y49uwJrq5Xv55LQ6WxwPjhB+MpnUvLVFaCp6dxw3/bbfDII+DnZzxdIjqGy3eU\n165d22h5i4eBTTNOvK1evZrly5ej1WoJDg5Gq9XSpUsXjh8/zosvvohOp6NXr17MnDmT7du3M2fO\nHEs3U3QihYWwdSts3mw8rbFoEbz8Mjg7t3bLro2lQkUIsEIYuLm5odfrTdN6vR6NRmNWxtHRkc2b\nN5umvby8GDJkCB999BFjxozB+df/pdOmTSM1NVXCQFyxqir44APjUUBaGtx1F+zYASNGdPyOQiGu\nhsUPjsPCwjh69Cg6nY6qqioSEhKIjIw0K1NaWkpVVRUAGzduZNy4cTg4OODr60taWhrnz59HKUVy\ncjIBAQGWbqLowHJz4aGHwN0dXnoJZs0yHhn8618QFiZBIERDLH5kYGdnR2xsLBERERgMBhYtWoS/\nvz9xcXEALF26lJycHObPn4+NjQ1BQUFs2rQJgNDQUObNm0dYWBi2trYMHz6cJUuWWLqJooOpqDBe\nCbRpk7HD9Z574MsvYejQ1m6ZEO2H3HQm2iWljKd/Nm0y3hvwu9/B4sXGTmFLXm4pREfR4peWCmFN\np0/D668bLwmtqTF2BufkSAeqENdKwkC0eVVVsHu38Yqg5GS44w6Ii4OxY6UPQAhLkdNEok2qrjZu\n+HfsgMRE401Qc+dCVJTlhzoQojNolbGJrEnCoOOqrjbeFLZjB7z/Pvj6wp13wowZUM+N6EKIKyBh\nINq0mhpISTEGwHvvGUe3vOsuYwBcciO7EOIaSQeyaHMMBvjiC2MAvPsuDB5sPAL4+mvjEAlCiJYn\nYSBahMEAX31lvB/gnXeMp33uvBP+9z8YMqS1WyeEkDAQVlNbC6mpxiOA//7XOAzynXcabwjz8Wnt\n1gkhLiVhICyqthbS041HAP/9L/TtawyAzz83dggLIdomCQNxzZSCjAzjEcDbbxtHBr3rLvj0U+NY\n+EKItk/CQFwVpeDbb40BsGOH8cldd90FH39svCdACNG+SBiIOpQyPgClsND40uvr/+nqajwF9MEH\nxoeBy93AQrRfcp9BJ6OU8WlXDW3gL/4E43X+Gk3DP+VOYCHaD7nprJO5uEff2MZeKeMGvbGNvZOT\n7OkL0ZFIGHQC+fnw2GPw4YfGq3mas0cvG3ohOpemtp1WeQx4UlISfn5+DB06lA0bNtSZX1xczNSp\nUwkJCWH06NEcOnTINK+kpIQZM2bg7+9PQEAAaWlp1mhih/Dzz7BypfEJXr6+8P33UF5ufNrXp58a\nn/n75JNw773Gcf6DgqB3bwkCIURdFg8Dg8HAsmXLSEpKIicnh/j4eHJzc83KrFu3juHDh5Odnc22\nbdtYvny5ad7y5cuZMmUKubm5HDhwAH+5NrGOCxfg+eeNAVBRAYcOwRNPQL9+sqEXQlwdi4dBRkYG\nPj4+eHp6Ym9vT1RUFImJiWZlcnNzGT9+PAC+vr7odDpOnz5NaWkp+/btY+HChYDxEZq9pJfSpLYW\n4uON1+6npMDevcZx/QcObO2WCSHaO4tfWlpUVIT7JcNNajQa0tPTzcqEhITw7rvvMnbsWDIyMigo\nKKCwsBAbGxv69+/PggULyM7OZsSIEcTExNCjRw+z5aOjo03vw8PDCQ8Pt/TXaHP27jU+6F0p2LIF\nOsFXFkJcg5SUFFJSUppd3uIdyO+88w5JSUls3LgRgDfeeIP09HRefvllU5ny8nKWL19OZmYmwcHB\nHD58mP/85z9UVVVx4403kpqaysiRI1mxYgVOTk48+eSTvzW4k3Ug5+bCqlVw4ACsW2d8uIutVXp6\nhBAdWYsPYe3m5oZerzdN6/V6NBqNWRlHR0c2b95smvby8mLIkCFUVFSg0WgYOXIkADNmzODpp5+2\ndBPbhR9/hOho4wifq1b9dpevEEJYg8X3McPCwjh69Cg6nY6qqioSEhKIjIw0K1NaWkpVVRUAGzdu\nZNy4cTg4ODBw4EDc3d05cuQIAMnJyQR2srENzp0zXgEUGAg9ekBenvH0kASBEMKaLH5kYGdnR2xs\nLBERERgMBhYtWoS/vz9xcXEALF26lJycHObPn4+NjQ1BQUFs2rTJtPzLL7/MnDlzqKqqwtvbmy1b\ntli6iW2SwWDsC3jiCbj5ZuODXmScfyFES5GbzlqZUsbB3R55xDjc83PPwahRrd0qIURHI4+9bMP2\n74eHH4aiItiwASIj5T4BIUTrkOtSWkFBAdx9N/zhD8YHvx88CH/8owSBEKL1SBi0oJIS45VBw4cb\nH/x+5Aj86U9gb9/aLRNCdHYSBi2gqgpiYozDR5w5Y7xn4O9/Nz4RTAgh2gLpM7AipYzPAV6zBoYO\nheRkCA5u7VYJIURdEgZWUlgIM2caB5X7979h4sTWbpEQQjRMwsBK/vtf8PKCN96Q4SOEEG2fbKas\nJDMTJkyQIBBCtA+yqbKSzEwIDW3tVgghRPPIHchWcOEC9OkDxcUyppAQom1olcdednaHDhmvHpIg\nEEK0FxIGVpCZCVpta7dCCCGaT8LACiQMhBDtjYSBFUgYCCHaG+lAtjCDAXr1Mt501rt3a7dGCCGM\npAO5hR07BgMGSBAIIdoXq4RBUlISfn5+DB06lA0bNtSZX1xczNSpUwkJCWH06NEcOnTIbL7BYECr\n1XL77bdbo3lWJaeIhBDtkcXDwGAwsGzZMpKSksjJySE+Pp7c3FyzMuvWrWP48OFkZ2ezbds2li9f\nbjY/JiaGgIAAbNrhAP8SBkKI9sjiYZCRkYGPjw+enp7Y29sTFRVFYmKiWZnc3FzGjx8PgK+vLzqd\njtOnTwNQWFjIrl27WLx4cZvuG2iIhIEQoj2y+EB1RUVFuLu7m6Y1Gg3p6elmZUJCQnj33XcZO3Ys\nGRkZFBQUUFhYSP/+/XnwwQd59tlnKSsra7CO6Oho0/vw8HDCw8Mt/TWuilISBkKItiElJYWUlJRm\nl7d4GDTn1M7q1atZvnw5Wq2W4OBgtFottra2fPjhhwwYMACtVtvol7g0DNqSoiLjoytdXVu7JUKI\nzu7yHeW1a9c2Wt7iYeDm5oZerzdN6/V6NBqNWRlHR0c2b95smvby8mLIkCEkJCSwc+dOdu3axYUL\nFygrK2PevHls27bN0s20iqws41FBO+zqEEJ0chbvMwgLC+Po0aPodDqqqqpISEggMjLSrExpaSlV\nVVUAbNy4kXHjxuHo6Mi6devQ6/Xk5+fz1ltvMWHChHYTBCCniIQQ7ZfFjwzs7OyIjY0lIiICg8HA\nokWL8Pf3Jy4uDoClS5eSk5PD/PnzsbGxISgoiE2bNtW7rvZ2NVFmJtx1V2u3QgghrpzcgWxBXl7w\nySdw/fWt3RIhhDDX1LZTwsBCiovBwwNKS+XpZkKItkeGo2gh2dkwbJgEgRCifZJNl4VI57EQoj2T\nMLAQCQMhRHsmYWAhEgZCiPZMOpAt4Px56NsXSkqgW7fWbo0QQtQlHcgt4LvvjJeTShAIIdorCQML\nuDgMhRBCtFcSBhYg/QVCiPZOwsACJAyEEO2ddCBfI4MBevUyDl/dq1drt0YIIeonHchWduQIuLhI\nEAgh2rdmhcG+ffvYsmULAKdPnyY/P9+qjWpPpPNYCNERNBkG0dHRPPPMM6xfvx6Aqqoq5s6da/WG\ntRfSXyCE6AiaDIP33nuPxMREevbsCRifZFZeXm71hrUXEgZCiI6gyTDo1q0btpcMxXnu3DmrNqg9\nUUrCQAjRMTQZBjNnzmTp0qWUlJTw6quvcsstt7B48eJGl0lKSsLPz4+hQ4eyYcOGOvOLi4uZOnUq\nISEhjB49mkOHDgHG5yWPHz+ewMBAgoKCeOmll67ya7WMwkKwswNX19ZuiRBCXJtGLy1VSqHX6zl8\n+DC7d+8GICIigkmTJjW4QoPBgK+vL8nJybi5uTFy5Eji4+Px9/c3lXn44YdxcnLi8ccfJy8vj/vv\nv5/k5GR+/PFHfvzxR0JDQ6moqGDEiBG8//77Zsu2pUtLd+6Ef/4TkpJauyVCCNG4pradTT4DecqU\nKXz33XfceuutzaowIyMDHx8fPD09AYiKiiIxMdFsg56bm8vq1asB8PX1RafTcfr0aQYOHMjAgQMB\ncHBwwN/fn5MnT5ot25bIlURCiI6i0TCwsbFhxIgRZGRkMGrUqGatsKioCHd3d9O0RqMhPT3drExI\nSAjvvvsuY8eOJSMjg4KCAgoLC+nfv7+pjE6nIzMzk9GjR9epIzo62vQ+PDyc8PDwZrXN0jIzYdas\nVqlaCCEalZKSQkpKSrPLN3lkkJaWxhtvvMHgwYNNVxTZ2Nhw4MCBesvb2Ng0Wenq1atZvnw5Wq2W\n4OBgtFotXbp0Mc2vqKhgxowZxMTE4ODgUGf5S8OgNWVmwjPPtHYrhBCirst3lNeuXdto+SbD4JNP\nPgF+28g3db7ezc0NvV5vmtbr9Wg0GrMyjo6ObN682TTt5eXFkCFDAKiurmb69OnMnTuXO+64o6nm\ntZqffza+vL1buyVCCHHtmryayNPTk5KSEnbu3MkHH3xAaWmpqT+gPmFhYRw9ehSdTkdVVRUJCQlE\nRkaalSktLaWqqgqAjRs3Mm7cOBwcHFBKsWjRIgICAlixYsW1fTMry8qCkBCwlQE9hBAdQJObspiY\nGObOncvp06c5deoUc+fObfSSTzs7O2JjY4mIiCAgIIC77roLf39/4uLiiIuLAyAnJ4fg4GD8/Pz4\n5JNPiImJAeCrr77ijTfe4PPPP0er1aLVaklqo5fqZGZCaGhrt0IIISyjyVFLg4ODSUtLM/UXnDt3\njhtuuIGDBw+2SAMv11YuLb37bhg/HhYubO2WCCFE0ywyaumldyDbynkRQO48FkJ0LE12IC9YsIDR\no0czbdo0lFK8//77LOzku8Pnz8P330NgYGu3RAghLKNZD7f59ttv+fLLL7GxseHmm29G24q7xG3h\nNFFGBixdajw6EEKI9uCa70BOS0sjICCAESNGAFBWVkZ6enq9N4N1FtJ5LIToaJrsALjvvvtwdHQ0\nTffs2ZP77rvPqo1q62QYCiFER9Os3uBL7yru0qULBoPBag1qD6TzWAjR0TQZBl5eXrz00ktUV1dT\nVVVFTEyM6W7hzshggO++M95wJoQQHUWTYfDvf/+br776Cjc3NzQaDWlpabz66qst0bY2KS/P+PwC\nJ6fWbokQQlhOkx3ILi4uJCQktERb2gU5RSSE6IgaPDJ49dVXOXLkCGAcnG7BggU4OTkxbNgw9u/f\n32INbGvkSiIhREfUYBjExMTg5eUFQHx8PNnZ2eTn5/OPf/yD5cuXt1gD2xq5kkgI0RE1GAb29vbY\n29sD8OGHHzJv3jycnZ2ZOHEiFRUVLdbAtkQpOU0khOiYGgwDW1tbTp48yYULF/jss8+YOHGiad75\n8+dbpHFtjV4PXbvCr0/mFEKIDqPBDuQnn3ySkSNHUlNTQ2RkJEFBQYDxUWrenfSJLnJUIIToqBod\nm6i6upry8nL69u1r+uzcuXMopep9HGVLaM2xiaKjoboa/t//a5XqhRDiql3TENb29vZmQQDG4Sha\nKwhaW1aWXEkkhOiYrPJwgqSkJPz8/Bg6dCgbNmyoM7+4uJipU6cSEhLC6NGjOXToULOXbU1ymkgI\n0VE1awjrK2EwGPD19SU5ORk3NzdGjhxJfHw8/v7+pjIPP/wwTk5OPP744+Tl5XH//feTnJzcrGVb\n6zTR2bMwZAgUF8tzj4UQ7Y9FnnR2ucOHDzc4LyMjAx8fHzw9PbG3tycqKorExESzMrm5uYwfPx4A\nX19fdDodP/30U7OWbS1ZWcbxiCQIhBAdUZPDUdTn1ltv5cSJE/XOKyoqwt3d3TSt0WhIT083KxMS\nEsK7777L2LFjycjIoKCggMLCwmYtCxAdHW16Hx4eTnh4+NV8jSsip4iEEO1JSkoKKSkpzS7fYBg8\n8MADDS7yLWsSAAAXjUlEQVRUXFzc4LxLh7tuyOrVq1m+fDlarZbg4GC0Wi1dunRp1rJgHgYtJTMT\nLrnVQggh2rTLd5TXrl3baPkGw2Dr1q0899xzdOvWzWwjrZTizTffbHCFbm5u6PV607Rer0ej0ZiV\ncXR0ZPPmzaZpLy8vvL29OX/+fJPLtpasLHj44dZuhRBCWEeDYRAWFkZQUBA33XRTnXmN7ZmHhYVx\n9OhRdDodgwYNIiEhgfj4eLMypaWlXHfddXTt2pWNGzcybtw4HBwcmrVsa6ishPx8CAho7ZYIIYR1\nNBgG77zzDt27d693nk6na3iFdnbExsYSERGBwWBg0aJF+Pv7ExcXB8DSpUvJyclh/vz52NjYEBQU\nxKZNmxpdtrUdPAh+fsahKIQQoiNq8NLSEydO4OHh0dLtaVJrXFr673/D11/Dr5klhBDtzlVfWvrH\nP/7R9H769OmWbVU7I1cSCSE6umZdNf/9999bux1tmjzQRgjR0cktVE2oqYFDh4w3nAkhREfVYAfy\ngQMHcHR0BIzPL7j4HoznnsrKyqzfujYgLw/c3OCSry+EEB1Og2FgMBhash1tlvQXCCE6AzlN1AQJ\nAyFEZyBh0AQJAyFEZ2DxIaytrSXvM1AKnJ0hNxdcXFqkSiGEsAqrDGHdWZw4Ad27SxAIITo+CYNG\nyCkiIURnIWHQCAkDIURnIWHQCAkDIURnIWHQCBmGQgjRWUgYNODMGSgrAy+v1m6JEEJYn4RBA7Ky\njEcFtvIbEkJ0ArKpa4D0FwghOhOrhEFSUhJ+fn4MHTqUDRs21Jl/5swZJk+eTGhoKEFBQWzdutU0\nb/369QQGBhIcHMzs2bP55ZdfrNHEJkkYCCE6E4uHgcFgYNmyZSQlJZGTk0N8fDy5ublmZWJjY9Fq\ntWRlZZGSksLKlSupqalBp9OxceNG9u/fz8GDBzEYDLz11luWbmKzSBgIITqTBkctvVoZGRn4+Pjg\n6ekJQFRUFImJiWbPMnZ1deXAgQMAlJWV4ezsjJ2dHU5OTtjb21NZWUmXLl2orKzEzc2tTh3R0dGm\n9+Hh4YSHh1v0O5w7BwUF0AYevyyEEFclJSWFlJSUZpe3eBgUFRXh7u5umtZoNKSnp5uVuffee5kw\nYQKDBg2ivLycHTt2ANC3b19WrlyJh4cH1113HREREUycOLFOHZeGgTUcPGgMAnt7q1YjhBBWc/mO\n8tq1axstb/HTRDY2Nk2WWbduHaGhoZw8eZKsrCzuv/9+KioqOH78OC+++CI6nY6TJ09SUVHB9u3b\nLd3EJskpIiFEZ2PxMHBzc0Ov15um9Xo9Go3GrExqaiozZ84EwNvbGy8vL3Jzc/n2228ZM2aM6bTR\ntGnTSE1NtXQTmyRhIITobCweBmFhYRw9ehSdTkdVVRUJCQlERkaalfHz8yM5ORmAU6dOkZeXh7e3\nN76+vqSlpXH+/HmUUiQnJxMQEGDpJjZJwkAI0dlYvM/Azs6O2NhYIiIiMBgMLFq0CH9/f+Li4gBY\nunQpjz76KAsWLCAkJITa2lqeeeYZ+vbtS9++fZk3bx5hYWHY2toyfPhwlixZYukmNqq6Gg4dgmHD\nWrRaIYRoVfJwm8t89x1Mnw55eVarQgghWpw83OYKySkiIURnJGFwGQkDIURnJGFwGQkDIURnJH0G\nl1AK+vY19hcMGGCVKoQQolVIn8EVKCiAHj0kCIQQnY+EwSXkFJEQorOSMLiEhIEQorOSMLiEhIEQ\norOSMLiEhIEQorOSMPjV6dNQUQG/PoZBCCE6FQmDX2VlQWgoNGMEbiGE6HAkDH4lp4iEEJ2ZhMGv\nJAyEEJ2ZhMGvJAyEEJ2ZDEeBseN4wAAoLZXnHgshOqZWGY4iKSkJPz8/hg4dyoYNG+rMP3PmDJMn\nTyY0NJSgoCC2bt1qmldSUsKMGTPw9/cnICCAtLQ0azTRzIEDEBAgQSCE6LwsHgYGg4Fly5aRlJRE\nTk4O8fHx5ObmmpWJjY1Fq9WSlZVFSkoKK1eupKamBoDly5czZcoUcnNzOXDgAP7+/pZuYh1ZWXKK\nSAjRuVk8DDIyMvDx8cHT0xN7e3uioqJITEw0K+Pq6kpZWRkAZWVlODs7Y2dnR2lpKfv27WPhwoWA\n8RGavXr1snQT65D+AiFEZ2fxZyAXFRXh7u5umtZoNKSnp5uVuffee5kwYQKDBg2ivLycHTt2AJCf\nn0///v1ZsGAB2dnZjBgxgpiYGHr06GG2fHR0tOl9eHg44eHh19TmzEz4NX+EEKJDSElJISUlpdnl\nLR4GNs24a2vdunWEhoaSkpLC8ePHmTRpEtnZ2dTU1LB//35iY2MZOXIkK1as4Omnn+bJJ580W/7S\nMLhW1dWQkwPDhllslUII0eou31Feu3Zto+UtfprIzc0NvV5vmtbr9Wg0GrMyqampzJw5EwBvb2+8\nvLzIy8tDo9Gg0WgYOXIkADNmzGD//v2WbqKZ3FwYPBh69rRqNUII0aZZPAzCwsI4evQoOp2Oqqoq\nEhISiIyMNCvj5+dHcnIyAKdOnSIvL48hQ4YwcOBA3N3dOXLkCADJyckEBgZauolmLg5DIYQQnZnF\nTxPZ2dkRGxtLREQEBoOBRYsW4e/vT1xcHABLly7l0UcfZcGCBYSEhFBbW8szzzxD3759AXj55ZeZ\nM2cOVVVVeHt7s2XLFks30Yx0HgshhNx0Rng4PPYYTJpksVUKIUSb09S2s1OHgVLQpw8cOwb9+llk\nlUII0Sa1yh3I7UV+Pjg6ShAIIUSnDgPpLxBCCKNOHQZyJZEQQhh16jCQIwMhhDCSMJAwEEKIzhsG\nP/0E588b7z4WQojOrtOGQWamsb+gGUMpCSFEh9dpw0A6j4UQ4jedNgykv0AIIX4jYSCEEKJzDkdR\nUQEuLlBaCnYWH6pPCCHaHhmOoh7Z2RAYKEEghBAXdcowkFNEQghhrlOGgVxJJIQQ5jplGMiRgRBC\nmLNKGCQlJeHn58fQoUPZsGFDnflnzpxh8uTJhIaGEhQUxNatW83mGwwGtFott99+u8XbVl1tfO7x\nsGEWX7UQQrRbFg8Dg8HAsmXLSEpKIicnh/j4eHJzc83KxMbGotVqycrKIiUlhZUrV1JTU2OaHxMT\nQ0BAADZWuD04Jwc8PaFHD4uvWggh2i2Lh0FGRgY+Pj54enpib29PVFQUiYmJZmVcXV0pKysDoKys\nDGdnZ+x+vbSnsLCQXbt2sXjxYos+3vIiOUUkhBB1WfziyqKiItzd3U3TGo2G9PR0szL33nsvEyZM\nYNCgQZSXl7Njxw7TvAcffJBnn33WFBb1iY6ONr0PDw8nPDy82e2TMBBCdAYpKSmkpKQ0u7zFw6A5\np3bWrVtHaGgoKSkpHD9+nEmTJpGdnc3evXsZMGAAWq220S9xaRhcqawssEJXhBBCtCmX7yivXbu2\n0fIWP03k5uaGXq83Tev1ejQajVmZ1NRUZs6cCYC3tzdeXl4cPnyY1NRUdu7ciZeXF7NmzWLPnj3M\nmzfPYm2rrTWGgRwZCCGEOYuHQVhYGEePHkWn01FVVUVCQgKRkZFmZfz8/EhOTgbg1KlT5OXl4e3t\nzbp169Dr9eTn5/PWW28xYcIEtm3bZrG25edDr17g7GyxVQohRIdg8dNEdnZ2xMbGEhERgcFgYNGi\nRfj7+xMXFwfA0qVLefTRR1mwYAEhISHU1tbyzDPP0Ldv3zrrsvTVRNJfIIQQ9etUA9U99hjY28M1\ndDkIIUS7JAPVXUKGoRBCiPp1qjCQ00RCCFG/ThMGp07BhQvg4dHaLRFCiLan04TBTz/BzJlghREu\nhBCi3etUHchCCNFZSQeyEEKIJkkYCCGEkDAQQgghYSCEEAIJAyGEEEgYCCGEQMJACCEEEgZCCCGQ\nMBBCCIGEgRBCCDpRGFzJg6GlPqlP6mufdXWG+qzFKmGQlJSEn58fQ4cOZcOGDXXmnzlzhsmTJxMa\nGkpQUBBbt24FjM9LHj9+PIGBgQQFBfHSSy9ZrE0d/R+I1Cf1tdX6OvJ3a436rMXiYWAwGFi2bBlJ\nSUnk5OQQHx9Pbm6uWZnY2Fi0Wi1ZWVmkpKSwcuVKampqsLe354UXXuDQoUOkpaXxyiuv1FlWCCGE\n5Vk8DDIyMvDx8cHT0xN7e3uioqJITEw0K+Pq6kpZWRkAZWVlODs7Y2dnx8CBAwn99VFkDg4O+Pv7\nc/LkSUs3UQghxOWUhb399ttq8eLFpunXX39dLVu2zKyMwWBQ48aNU66ursrBwUHt2rWrznry8/OV\nh4eHKi8vN/sckJe85CUveV3FqzF2WJhNM54es27dOkJDQ0lJSeH48eNMmjSJ7OxsHB0dAaioqGDG\njBnExMTg4OBgtqySZxkIIYTFWfw0kZubG3q93jSt1+vRaDRmZVJTU5k5cyYA3t7eeHl5kZeXB0B1\ndTXTp09n7ty53HHHHZZunhBCiHpYPAzCwsI4evQoOp2OqqoqEhISiIyMNCvj5+dHcnIyAKdOnSIv\nL48hQ4aglGLRokUEBASwYsUKSzdNCCFEA6zy2MuPP/6YFStWYDAYWLRoEWvWrCEuLg6ApUuXcubM\nGRYsWMCJEyeora1lzZo1zJ49my+//JLf/e53DBs2zHS6af369UyePNnSTRRCCHGpq+wnblcWLFig\nBgwYoIKCgqxe14kTJ1R4eLgKCAhQgYGBKiYmxqr1nT9/Xo0aNUqFhIQof39/tXr1aqvWd1FNTY0K\nDQ1Vt912m9XrGjx4sAoODlahoaFq5MiRVq+vuLhYTZ8+Xfn5+Sl/f3/1v//9z2p1HT58WIWGhppe\nTk5OVv83s27dOhUQEKCCgoLUrFmz1IULF6xW14svvqiCgoJUYGCgevHFFy2+/vr+b589e1ZNnDhR\nDR06VE2aNEkVFxdbtb4dO3aogIAAZWtrq7799luL1dXSOkUYfPHFF2r//v0tEgY//PCDyszMVEop\nVV5erq6//nqVk5Nj1TrPnTunlFKqurpajR49Wu3bt8+q9Sml1PPPP69mz56tbr/9dqvX5enpqc6e\nPWv1ei6aN2+e2rRpk1LK+DstKSlpkXoNBoMaOHCgOnHihNXqyM/PV15eXqYAuPPOO9XWrVutUtfB\ngwdVUFCQOn/+vKqpqVETJ05Ux44ds2gd9f3ffvjhh9WGDRuUUko9/fTTatWqVVatLzc3V+Xl5anw\n8PB2HQadYjiKm2++mT59+rRIXa1xr0SPHj0AqKqqwmAw0LdvX6vWV1hYyK5du1i8eHGLXd3VUvWU\nlpayb98+Fi5cCICdnR29evVqkbqTk5Px9vbG3d3danU4OTlhb29PZWUlNTU1VFZW4ubmZpW6Dh8+\nzOjRo+nevTtdunRh3LhxvPvuuxato77/2zt37uSee+4B4J577uH999+3an1+fn5cf/31FqujtXSK\nMGgtOp2OzMxMRo8ebdV6amtrCQ0NxcXFhfHjxxMQEGDV+h588EGeffZZbG1b5p+PjY0NEydOJCws\njI0bN1q1rvz8fPr378+CBQsYPnw49957L5WVlVat86K33nqL2bNnW7WOvn37snLlSjw8PBg0aBC9\ne/dm4sSJVqkrKCiIffv28fPPP1NZWclHH31EYWGhVeq61KlTp3BxcQHAxcWFU6dOWb3OjkDCwEoa\nu1fC0mxtbcnKyqKwsJAvvvjCqmOlfPjhhwwYMACtVttie+tfffUVmZmZfPzxx7zyyivs27fPanXV\n1NSwf/9+/vznP7N//3569uzJ008/bbX6LqqqquKDDz4wXXJtLcePH+fFF19Ep9Nx8uRJKioq2L59\nu1Xq8vPzY9WqVdx66638/ve/R6vVttgOxEU2NjbNuvdJSBhYRWvdK9GrVy/+8Ic/8M0331itjtTU\nVHbu3ImXlxezZs1iz549zJs3z2r1gXH4EoD+/fszdepUMjIyrFaXRqNBo9EwcuRIAGbMmMH+/fut\nVt9FH3/8MSNGjKB///5Wreebb75hzJgxpiFgpk2bRmpqqtXqW7hwId988w179+6ld+/e+Pr6Wq2u\ni1xcXPjxxx8B+OGHHxgwYIDV6+wIJAwsTLXwvRJnzpyhpKQEgPPnz/Ppp5+i1WqtVt+6devQ6/Xk\n5+fz1ltvMWHCBLZt22a1+iorKykvLwfg3Llz7N69m+DgYKvVN3DgQNzd3Tly5AhgPI8fGBhotfou\nio+PZ9asWVavx8/Pj7S0NM6fP49SiuTkZKueVvzpp58AOHHiBO+9957VT4MBREZG8tprrwHw2muv\ntegOWUsdLVtFa/Zet5SoqCjl6uqqunbtqjQajdq8ebPV6tq3b5+ysbFRISEhpssFP/74Y6vVd+DA\nAaXValVISIgKDg5WzzzzjNXqulxKSorVryb6/vvvVUhIiAoJCVGBgYFq3bp1Vq1PKaWysrJUWFiY\nGjZsmJo6darVryaqqKhQzs7OqqyszKr1XLRhwwbTpaXz5s1TVVVVVqvr5ptvVgEBASokJETt2bPH\n4uu/+H/b3t7e9H/77Nmz6pZbbrHKpaWX17dp0yb13nvvKY1Go7p3765cXFzU5MmTLVZfS7LKTWdC\nCCHaFzlNJIQQQsJACCGEhIEQQggkDIQQQiBhIDqoNWvWkJKSwvvvv3/FN42dPn2a0aNHM2LECL76\n6iuzeeHh4fj5+aHVatFqtVc1vEJ2djYff/zxFS8nhDVJGIgOKSMjgxtuuIG9e/fyu9/97oqW/eyz\nzxg2bBjffvstN910k9k8Gxsb3nzzTTIzM8nMzGTatGlX3LbMzEx27dp1Rcso46CSV1yXEM0lYSA6\nlEceeYSQkBC+/vprbrzxRjZt2sSf/vQnnnrqqTpldTodEyZMICQkhIkTJ6LX68nKymLVqlUkJiai\n1Wq5cOFCneUu3yifPn2aGTNmMGrUKEaNGmW6ozcjI4MxY8YwfPhwbrrpJo4cOUJVVRX/93//R0JC\nAlqtlh07dhAdHc3zzz9vWl9QUBAnTpxAp9Ph6+vLPffcQ3BwMHq9nmeffZZRo0YREhJCdHQ0YLwZ\n7w9/+AOhoaEEBwezY8cOC/5GRafRqnc5CGEFX3/9tfrLX/6iqqur1U033dRgudtuu01t27ZNKaXU\n5s2b1R133KGUUmrr1q3qgQceqHeZcePGKV9fXxUaGqq0Wq06e/asmjVrlvryyy+VUkoVFBQof39/\npZRSZWVlqqamRiml1KeffqqmT59e7/qjo6PVc889Z5oOCgpSBQUFKj8/X9na2qr09HSllFKffPKJ\nWrJkiVLKONz1bbfdpr744gv1zjvvqHvvvde0fGlp6RX8toQwsmvtMBLC0r799luGDRtGbm4u/v7+\nDZZLS0szDW88d+5cHnnkEaDxUzIXTxMNHz7c9FlycjK5ubmm6fLyciorKykpKWHevHkcO3YMGxsb\nampqmlz/5QYPHsyoUaMA2L17N7t37zYNN3Lu3DmOHTvG2LFjWblyJatXr+a2225j7NixzVq3EJeS\nMBAdRnZ2NvPnz6ewsJB+/fpRWVmJUorhw4eTmppK9+7d6yzT3I1yY8sopUhPT6dr165mn//5z3/m\nlltu4b333qOgoIDw8PB612dnZ0dtba1p+tJTUz179jQru2bNGpYsWVJnHZmZmXz00Uf87W9/45Zb\nbuHxxx+/0q8lOjnpMxAdRkhICJmZmVx//fXk5uYyYcIEdu/ezf79++sNgjFjxvDWW28BsH379mZ3\nNF8+JPKtt97KSy+9ZJrOzs4GoKysjEGDBgGwZcsW03wnJyfT4HsAnp6eppFR9+/fT35+fr31RkRE\nsHnzZs6dOwdAUVERp0+f5ocffqB79+7MmTOHhx56qEVGWRUdj4SB6FBOnz5tetLb4cOH8fPza7Ds\nyy+/zJYtWwgJCWH79u3ExMQAVz4G/ksvvcQ333xDSEgIgYGBxMXFAcbO7DVr1jB8+HAMBoNpnePH\njycnJwetVsvbb7/N9OnT+fnnnwkKCuKVV14xG+b50nZMmjSJ2bNnc+ONNzJs2DDuvPNOysvLOXjw\nIKNHj0ar1fL3v/9djgrEVZGB6oQQQsiRgRBCCAkDIYQQSBgIIYRAwkAIIQQSBkIIIZAwEEIIAfx/\noVCkQHqsOZgAAAAASUVORK5CYII=\n"
      }
     ],
     "prompt_number": 117
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}